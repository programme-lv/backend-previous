extend type Query {
    """
    Returns a list of all tasks that have a published version.
    Used for rendering the public task view.
    """
    listPublishedTasks: [Task!]!

    """
    Returns the latest published version / snapshot of a task.
    Used when accessing url like /task/:code.
    """
    getPublishedTaskVersionByCode(code: String!): Task!

    """
    Returns a list of all tasks that are editable by the current user.
    Used for rendering the editable task list in user profile.
    """
    listEditableTasks: [Task!]!

    """
    Returns the latest version of a task.
    Used for task preparation / development / editing.
    """
    getCurrentTaskVersionById(id: ID!): Task!
}

extend type Mutation {
    """
    Creates a new task with the given name and code.
    The code is used to access the task via url like /task/:code.
    Currently only admins can create tasks.
    A default task version is assigned to the task.
    """
    createTask(name: String!, code: String!): Task!

    updateTaskMetadata(id: ID!, authors: [String!], origin: String): Task!
    updateTaskDescription(id: ID!, code: String, name: String, story: String, input: String, output: String, notes: String): Task!
    updateTaskExamples(id: ID!, inputs: [String!], outputs: [String!]): Task!
    updateTaskConstraints(id: ID!, timeLimitMs: Int, memoryLimitKB: Int): Task!

    publishTask(id: ID!): Task!
    deleteTask(id: ID!): Task!
}

type Task {
    """
    The id of the task. Not the task version.
    """
    id: ID!
    code: String!
    name: String!

    description: Description!
    constraints: Constraints!
    metadata: Metadata!

    solved: Boolean

    tests: [Test!]!

    createdAt: String!
    updatedAt: String!
}

type Description {
    id: ID!

    story: String!
    input: String!
    output: String!
    examples: [Example!]
    notes: String
}

type Constraints {
    timeLimitMs: Int!
    memoryLimitKb: Int!
}

type Metadata {
    authors: [String!]
    origin: String
}

type Example {
    id: ID!
    input: String!
    answer: String!
}

type Test {
    id: ID!
    name: String!
    input: String!
    answer: String!
}