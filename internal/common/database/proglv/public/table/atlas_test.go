//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AtlasTest = newAtlasTestTable("public", "atlas_test", "")

type atlasTestTable struct {
	postgres.Table

	// Columns
	ID   postgres.ColumnInteger
	Name postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AtlasTestTable struct {
	atlasTestTable

	EXCLUDED atlasTestTable
}

// AS creates new AtlasTestTable with assigned alias
func (a AtlasTestTable) AS(alias string) *AtlasTestTable {
	return newAtlasTestTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AtlasTestTable with assigned schema name
func (a AtlasTestTable) FromSchema(schemaName string) *AtlasTestTable {
	return newAtlasTestTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AtlasTestTable with assigned table prefix
func (a AtlasTestTable) WithPrefix(prefix string) *AtlasTestTable {
	return newAtlasTestTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AtlasTestTable with assigned table suffix
func (a AtlasTestTable) WithSuffix(suffix string) *AtlasTestTable {
	return newAtlasTestTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAtlasTestTable(schemaName, tableName, alias string) *AtlasTestTable {
	return &AtlasTestTable{
		atlasTestTable: newAtlasTestTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newAtlasTestTableImpl("", "excluded", ""),
	}
}

func newAtlasTestTableImpl(schemaName, tableName, alias string) atlasTestTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn}
		mutableColumns = postgres.ColumnList{NameColumn}
	)

	return atlasTestTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Name: NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
