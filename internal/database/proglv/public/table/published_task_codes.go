//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PublishedTaskCodes = newPublishedTaskCodesTable("public", "published_task_codes", "")

type publishedTaskCodesTable struct {
	postgres.Table

	// Columns
	TaskCode postgres.ColumnString
	TaskID   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PublishedTaskCodesTable struct {
	publishedTaskCodesTable

	EXCLUDED publishedTaskCodesTable
}

// AS creates new PublishedTaskCodesTable with assigned alias
func (a PublishedTaskCodesTable) AS(alias string) *PublishedTaskCodesTable {
	return newPublishedTaskCodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PublishedTaskCodesTable with assigned schema name
func (a PublishedTaskCodesTable) FromSchema(schemaName string) *PublishedTaskCodesTable {
	return newPublishedTaskCodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PublishedTaskCodesTable with assigned table prefix
func (a PublishedTaskCodesTable) WithPrefix(prefix string) *PublishedTaskCodesTable {
	return newPublishedTaskCodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PublishedTaskCodesTable with assigned table suffix
func (a PublishedTaskCodesTable) WithSuffix(suffix string) *PublishedTaskCodesTable {
	return newPublishedTaskCodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPublishedTaskCodesTable(schemaName, tableName, alias string) *PublishedTaskCodesTable {
	return &PublishedTaskCodesTable{
		publishedTaskCodesTable: newPublishedTaskCodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newPublishedTaskCodesTableImpl("", "excluded", ""),
	}
}

func newPublishedTaskCodesTableImpl(schemaName, tableName, alias string) publishedTaskCodesTable {
	var (
		TaskCodeColumn = postgres.StringColumn("task_code")
		TaskIDColumn   = postgres.IntegerColumn("task_id")
		allColumns     = postgres.ColumnList{TaskCodeColumn, TaskIDColumn}
		mutableColumns = postgres.ColumnList{TaskIDColumn}
	)

	return publishedTaskCodesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TaskCode: TaskCodeColumn,
		TaskID:   TaskIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
