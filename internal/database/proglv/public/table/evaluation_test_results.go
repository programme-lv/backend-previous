//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EvaluationTestResults = newEvaluationTestResultsTable("public", "evaluation_test_results", "")

type evaluationTestResultsTable struct {
	postgres.Table

	// Columns
	ID                      postgres.ColumnInteger
	SubmissionEvaluationsID postgres.ColumnInteger
	TaskVersionTestID       postgres.ColumnInteger
	ExecStdout              postgres.ColumnString
	ExecStderr              postgres.ColumnString
	ExecTimeMs              postgres.ColumnInteger
	ExecMemoryKb            postgres.ColumnInteger
	ExecTimeWallMs          postgres.ColumnInteger
	ExecExitCode            postgres.ColumnInteger
	CheckerStdout           postgres.ColumnString
	CheckerStderr           postgres.ColumnString
	CheckerTimeMs           postgres.ColumnInteger
	CheckerMemoryKb         postgres.ColumnInteger
	CheckerTimeWallMs       postgres.ColumnInteger
	CheckerExitCode         postgres.ColumnInteger
	EvalStatusID            postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EvaluationTestResultsTable struct {
	evaluationTestResultsTable

	EXCLUDED evaluationTestResultsTable
}

// AS creates new EvaluationTestResultsTable with assigned alias
func (a EvaluationTestResultsTable) AS(alias string) *EvaluationTestResultsTable {
	return newEvaluationTestResultsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EvaluationTestResultsTable with assigned schema name
func (a EvaluationTestResultsTable) FromSchema(schemaName string) *EvaluationTestResultsTable {
	return newEvaluationTestResultsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EvaluationTestResultsTable with assigned table prefix
func (a EvaluationTestResultsTable) WithPrefix(prefix string) *EvaluationTestResultsTable {
	return newEvaluationTestResultsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EvaluationTestResultsTable with assigned table suffix
func (a EvaluationTestResultsTable) WithSuffix(suffix string) *EvaluationTestResultsTable {
	return newEvaluationTestResultsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEvaluationTestResultsTable(schemaName, tableName, alias string) *EvaluationTestResultsTable {
	return &EvaluationTestResultsTable{
		evaluationTestResultsTable: newEvaluationTestResultsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                   newEvaluationTestResultsTableImpl("", "excluded", ""),
	}
}

func newEvaluationTestResultsTableImpl(schemaName, tableName, alias string) evaluationTestResultsTable {
	var (
		IDColumn                      = postgres.IntegerColumn("id")
		SubmissionEvaluationsIDColumn = postgres.IntegerColumn("submission_evaluations_id")
		TaskVersionTestIDColumn       = postgres.IntegerColumn("task_version_test_id")
		ExecStdoutColumn              = postgres.StringColumn("exec_stdout")
		ExecStderrColumn              = postgres.StringColumn("exec_stderr")
		ExecTimeMsColumn              = postgres.IntegerColumn("exec_time_ms")
		ExecMemoryKbColumn            = postgres.IntegerColumn("exec_memory_kb")
		ExecTimeWallMsColumn          = postgres.IntegerColumn("exec_time_wall_ms")
		ExecExitCodeColumn            = postgres.IntegerColumn("exec_exit_code")
		CheckerStdoutColumn           = postgres.StringColumn("checker_stdout")
		CheckerStderrColumn           = postgres.StringColumn("checker_stderr")
		CheckerTimeMsColumn           = postgres.IntegerColumn("checker_time_ms")
		CheckerMemoryKbColumn         = postgres.IntegerColumn("checker_memory_kb")
		CheckerTimeWallMsColumn       = postgres.IntegerColumn("checker_time_wall_ms")
		CheckerExitCodeColumn         = postgres.IntegerColumn("checker_exit_code")
		EvalStatusIDColumn            = postgres.StringColumn("eval_status_id")
		allColumns                    = postgres.ColumnList{IDColumn, SubmissionEvaluationsIDColumn, TaskVersionTestIDColumn, ExecStdoutColumn, ExecStderrColumn, ExecTimeMsColumn, ExecMemoryKbColumn, ExecTimeWallMsColumn, ExecExitCodeColumn, CheckerStdoutColumn, CheckerStderrColumn, CheckerTimeMsColumn, CheckerMemoryKbColumn, CheckerTimeWallMsColumn, CheckerExitCodeColumn, EvalStatusIDColumn}
		mutableColumns                = postgres.ColumnList{SubmissionEvaluationsIDColumn, TaskVersionTestIDColumn, ExecStdoutColumn, ExecStderrColumn, ExecTimeMsColumn, ExecMemoryKbColumn, ExecTimeWallMsColumn, ExecExitCodeColumn, CheckerStdoutColumn, CheckerStderrColumn, CheckerTimeMsColumn, CheckerMemoryKbColumn, CheckerTimeWallMsColumn, CheckerExitCodeColumn, EvalStatusIDColumn}
	)

	return evaluationTestResultsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                      IDColumn,
		SubmissionEvaluationsID: SubmissionEvaluationsIDColumn,
		TaskVersionTestID:       TaskVersionTestIDColumn,
		ExecStdout:              ExecStdoutColumn,
		ExecStderr:              ExecStderrColumn,
		ExecTimeMs:              ExecTimeMsColumn,
		ExecMemoryKb:            ExecMemoryKbColumn,
		ExecTimeWallMs:          ExecTimeWallMsColumn,
		ExecExitCode:            ExecExitCodeColumn,
		CheckerStdout:           CheckerStdoutColumn,
		CheckerStderr:           CheckerStderrColumn,
		CheckerTimeMs:           CheckerTimeMsColumn,
		CheckerMemoryKb:         CheckerMemoryKbColumn,
		CheckerTimeWallMs:       CheckerTimeWallMsColumn,
		CheckerExitCode:         CheckerExitCodeColumn,
		EvalStatusID:            EvalStatusIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
