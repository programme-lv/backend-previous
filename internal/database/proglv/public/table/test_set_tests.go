//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TestSetTests = newTestSetTestsTable("public", "test_set_tests", "")

type testSetTestsTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnInteger
	TestFilename     postgres.ColumnString
	TestSetID        postgres.ColumnInteger
	InputTextFileID  postgres.ColumnInteger
	AnswerTextFileID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TestSetTestsTable struct {
	testSetTestsTable

	EXCLUDED testSetTestsTable
}

// AS creates new TestSetTestsTable with assigned alias
func (a TestSetTestsTable) AS(alias string) *TestSetTestsTable {
	return newTestSetTestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TestSetTestsTable with assigned schema name
func (a TestSetTestsTable) FromSchema(schemaName string) *TestSetTestsTable {
	return newTestSetTestsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TestSetTestsTable with assigned table prefix
func (a TestSetTestsTable) WithPrefix(prefix string) *TestSetTestsTable {
	return newTestSetTestsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TestSetTestsTable with assigned table suffix
func (a TestSetTestsTable) WithSuffix(suffix string) *TestSetTestsTable {
	return newTestSetTestsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTestSetTestsTable(schemaName, tableName, alias string) *TestSetTestsTable {
	return &TestSetTestsTable{
		testSetTestsTable: newTestSetTestsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newTestSetTestsTableImpl("", "excluded", ""),
	}
}

func newTestSetTestsTableImpl(schemaName, tableName, alias string) testSetTestsTable {
	var (
		IDColumn               = postgres.IntegerColumn("id")
		TestFilenameColumn     = postgres.StringColumn("test_filename")
		TestSetIDColumn        = postgres.IntegerColumn("test_set_id")
		InputTextFileIDColumn  = postgres.IntegerColumn("input_text_file_id")
		AnswerTextFileIDColumn = postgres.IntegerColumn("answer_text_file_id")
		allColumns             = postgres.ColumnList{IDColumn, TestFilenameColumn, TestSetIDColumn, InputTextFileIDColumn, AnswerTextFileIDColumn}
		mutableColumns         = postgres.ColumnList{TestFilenameColumn, TestSetIDColumn, InputTextFileIDColumn, AnswerTextFileIDColumn}
	)

	return testSetTestsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		TestFilename:     TestFilenameColumn,
		TestSetID:        TestSetIDColumn,
		InputTextFileID:  InputTextFileIDColumn,
		AnswerTextFileID: AnswerTextFileIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
