//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VersionSolution = newVersionSolutionTable("public", "version_solution", "")

type versionSolutionTable struct {
	postgres.Table

	// Columns
	ID                   postgres.ColumnInteger
	TaskVersionID        postgres.ColumnInteger
	ProgrammingLangID    postgres.ColumnString
	Solution             postgres.ColumnString
	CreatedAt            postgres.ColumnTimestampz
	Hidden               postgres.ColumnBool
	ExpectedEvalStatusID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VersionSolutionTable struct {
	versionSolutionTable

	EXCLUDED versionSolutionTable
}

// AS creates new VersionSolutionTable with assigned alias
func (a VersionSolutionTable) AS(alias string) *VersionSolutionTable {
	return newVersionSolutionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VersionSolutionTable with assigned schema name
func (a VersionSolutionTable) FromSchema(schemaName string) *VersionSolutionTable {
	return newVersionSolutionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VersionSolutionTable with assigned table prefix
func (a VersionSolutionTable) WithPrefix(prefix string) *VersionSolutionTable {
	return newVersionSolutionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VersionSolutionTable with assigned table suffix
func (a VersionSolutionTable) WithSuffix(suffix string) *VersionSolutionTable {
	return newVersionSolutionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVersionSolutionTable(schemaName, tableName, alias string) *VersionSolutionTable {
	return &VersionSolutionTable{
		versionSolutionTable: newVersionSolutionTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newVersionSolutionTableImpl("", "excluded", ""),
	}
}

func newVersionSolutionTableImpl(schemaName, tableName, alias string) versionSolutionTable {
	var (
		IDColumn                   = postgres.IntegerColumn("id")
		TaskVersionIDColumn        = postgres.IntegerColumn("task_version_id")
		ProgrammingLangIDColumn    = postgres.StringColumn("programming_lang_id")
		SolutionColumn             = postgres.StringColumn("solution")
		CreatedAtColumn            = postgres.TimestampzColumn("created_at")
		HiddenColumn               = postgres.BoolColumn("hidden")
		ExpectedEvalStatusIDColumn = postgres.IntegerColumn("expected_eval_status_id")
		allColumns                 = postgres.ColumnList{IDColumn, TaskVersionIDColumn, ProgrammingLangIDColumn, SolutionColumn, CreatedAtColumn, HiddenColumn, ExpectedEvalStatusIDColumn}
		mutableColumns             = postgres.ColumnList{TaskVersionIDColumn, ProgrammingLangIDColumn, SolutionColumn, CreatedAtColumn, HiddenColumn, ExpectedEvalStatusIDColumn}
	)

	return versionSolutionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		TaskVersionID:        TaskVersionIDColumn,
		ProgrammingLangID:    ProgrammingLangIDColumn,
		Solution:             SolutionColumn,
		CreatedAt:            CreatedAtColumn,
		Hidden:               HiddenColumn,
		ExpectedEvalStatusID: ExpectedEvalStatusIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
