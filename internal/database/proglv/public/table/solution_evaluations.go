//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SolutionEvaluations = newSolutionEvaluationsTable("public", "solution_evaluations", "")

type solutionEvaluationsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	SubmissionID postgres.ColumnInteger
	EvaluationID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SolutionEvaluationsTable struct {
	solutionEvaluationsTable

	EXCLUDED solutionEvaluationsTable
}

// AS creates new SolutionEvaluationsTable with assigned alias
func (a SolutionEvaluationsTable) AS(alias string) *SolutionEvaluationsTable {
	return newSolutionEvaluationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SolutionEvaluationsTable with assigned schema name
func (a SolutionEvaluationsTable) FromSchema(schemaName string) *SolutionEvaluationsTable {
	return newSolutionEvaluationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SolutionEvaluationsTable with assigned table prefix
func (a SolutionEvaluationsTable) WithPrefix(prefix string) *SolutionEvaluationsTable {
	return newSolutionEvaluationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SolutionEvaluationsTable with assigned table suffix
func (a SolutionEvaluationsTable) WithSuffix(suffix string) *SolutionEvaluationsTable {
	return newSolutionEvaluationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSolutionEvaluationsTable(schemaName, tableName, alias string) *SolutionEvaluationsTable {
	return &SolutionEvaluationsTable{
		solutionEvaluationsTable: newSolutionEvaluationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newSolutionEvaluationsTableImpl("", "excluded", ""),
	}
}

func newSolutionEvaluationsTableImpl(schemaName, tableName, alias string) solutionEvaluationsTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		SubmissionIDColumn = postgres.IntegerColumn("submission_id")
		EvaluationIDColumn = postgres.IntegerColumn("evaluation_id")
		allColumns         = postgres.ColumnList{IDColumn, SubmissionIDColumn, EvaluationIDColumn}
		mutableColumns     = postgres.ColumnList{SubmissionIDColumn, EvaluationIDColumn}
	)

	return solutionEvaluationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		SubmissionID: SubmissionIDColumn,
		EvaluationID: EvaluationIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
