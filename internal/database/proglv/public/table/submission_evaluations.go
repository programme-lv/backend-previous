//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SubmissionEvaluations = newSubmissionEvaluationsTable("public", "submission_evaluations", "")

type submissionEvaluationsTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnInteger
	TaskSubmissionID    postgres.ColumnInteger
	EvalTaskVersionID   postgres.ColumnInteger
	TestMaximumTimeMs   postgres.ColumnInteger
	TestMaximumMemoryKb postgres.ColumnInteger
	TestTotalTimeMs     postgres.ColumnInteger
	TestTotalMemoryKb   postgres.ColumnInteger
	EvalStatusID        postgres.ColumnString
	EvalTotalScore      postgres.ColumnInteger
	CompilationStdout   postgres.ColumnString
	CompilationStderr   postgres.ColumnString
	CompilationTimeMs   postgres.ColumnInteger
	CompilationMemoryKb postgres.ColumnInteger
	CreatedAt           postgres.ColumnTimestampz
	UpdatedAt           postgres.ColumnTimestampz
	EvalPossibleScore   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SubmissionEvaluationsTable struct {
	submissionEvaluationsTable

	EXCLUDED submissionEvaluationsTable
}

// AS creates new SubmissionEvaluationsTable with assigned alias
func (a SubmissionEvaluationsTable) AS(alias string) *SubmissionEvaluationsTable {
	return newSubmissionEvaluationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubmissionEvaluationsTable with assigned schema name
func (a SubmissionEvaluationsTable) FromSchema(schemaName string) *SubmissionEvaluationsTable {
	return newSubmissionEvaluationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubmissionEvaluationsTable with assigned table prefix
func (a SubmissionEvaluationsTable) WithPrefix(prefix string) *SubmissionEvaluationsTable {
	return newSubmissionEvaluationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubmissionEvaluationsTable with assigned table suffix
func (a SubmissionEvaluationsTable) WithSuffix(suffix string) *SubmissionEvaluationsTable {
	return newSubmissionEvaluationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubmissionEvaluationsTable(schemaName, tableName, alias string) *SubmissionEvaluationsTable {
	return &SubmissionEvaluationsTable{
		submissionEvaluationsTable: newSubmissionEvaluationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                   newSubmissionEvaluationsTableImpl("", "excluded", ""),
	}
}

func newSubmissionEvaluationsTableImpl(schemaName, tableName, alias string) submissionEvaluationsTable {
	var (
		IDColumn                  = postgres.IntegerColumn("id")
		TaskSubmissionIDColumn    = postgres.IntegerColumn("task_submission_id")
		EvalTaskVersionIDColumn   = postgres.IntegerColumn("eval_task_version_id")
		TestMaximumTimeMsColumn   = postgres.IntegerColumn("test_maximum_time_ms")
		TestMaximumMemoryKbColumn = postgres.IntegerColumn("test_maximum_memory_kb")
		TestTotalTimeMsColumn     = postgres.IntegerColumn("test_total_time_ms")
		TestTotalMemoryKbColumn   = postgres.IntegerColumn("test_total_memory_kb")
		EvalStatusIDColumn        = postgres.StringColumn("eval_status_id")
		EvalTotalScoreColumn      = postgres.IntegerColumn("eval_total_score")
		CompilationStdoutColumn   = postgres.StringColumn("compilation_stdout")
		CompilationStderrColumn   = postgres.StringColumn("compilation_stderr")
		CompilationTimeMsColumn   = postgres.IntegerColumn("compilation_time_ms")
		CompilationMemoryKbColumn = postgres.IntegerColumn("compilation_memory_kb")
		CreatedAtColumn           = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn           = postgres.TimestampzColumn("updated_at")
		EvalPossibleScoreColumn   = postgres.IntegerColumn("eval_possible_score")
		allColumns                = postgres.ColumnList{IDColumn, TaskSubmissionIDColumn, EvalTaskVersionIDColumn, TestMaximumTimeMsColumn, TestMaximumMemoryKbColumn, TestTotalTimeMsColumn, TestTotalMemoryKbColumn, EvalStatusIDColumn, EvalTotalScoreColumn, CompilationStdoutColumn, CompilationStderrColumn, CompilationTimeMsColumn, CompilationMemoryKbColumn, CreatedAtColumn, UpdatedAtColumn, EvalPossibleScoreColumn}
		mutableColumns            = postgres.ColumnList{TaskSubmissionIDColumn, EvalTaskVersionIDColumn, TestMaximumTimeMsColumn, TestMaximumMemoryKbColumn, TestTotalTimeMsColumn, TestTotalMemoryKbColumn, EvalStatusIDColumn, EvalTotalScoreColumn, CompilationStdoutColumn, CompilationStderrColumn, CompilationTimeMsColumn, CompilationMemoryKbColumn, CreatedAtColumn, UpdatedAtColumn, EvalPossibleScoreColumn}
	)

	return submissionEvaluationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		TaskSubmissionID:    TaskSubmissionIDColumn,
		EvalTaskVersionID:   EvalTaskVersionIDColumn,
		TestMaximumTimeMs:   TestMaximumTimeMsColumn,
		TestMaximumMemoryKb: TestMaximumMemoryKbColumn,
		TestTotalTimeMs:     TestTotalTimeMsColumn,
		TestTotalMemoryKb:   TestTotalMemoryKbColumn,
		EvalStatusID:        EvalStatusIDColumn,
		EvalTotalScore:      EvalTotalScoreColumn,
		CompilationStdout:   CompilationStdoutColumn,
		CompilationStderr:   CompilationStderrColumn,
		CompilationTimeMs:   CompilationTimeMsColumn,
		CompilationMemoryKb: CompilationMemoryKbColumn,
		CreatedAt:           CreatedAtColumn,
		UpdatedAt:           UpdatedAtColumn,
		EvalPossibleScore:   EvalPossibleScoreColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
