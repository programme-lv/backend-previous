package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*User, error) {
	user, err := r.UserSrv.Login(username, password)
	if err != nil {
		r.Logger.Warn("login failed", "error", err)
		return nil, smartError(ctx, err)

	}
	r.SessionManager.Put(ctx, "user_id", user.ID)

	return mapDomainUserObjToGQLUserObj(user), nil
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, username string, password string, email string, firstName string, lastName string) (*User, error) {
	user, err := r.UserSrv.Register(username, password, email, firstName, lastName)
	if err != nil {
		r.Logger.Warn("register failed", "error", err)
		return nil, smartError(ctx, err)
	}

	return mapDomainUserObjToGQLUserObj(user), nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	r.SessionManager.Remove(ctx, "user_id")

	return true, nil
}

// Whoami is the resolver for the whoami field.
func (r *queryResolver) Whoami(ctx context.Context) (*User, error) {
	userID := r.SessionManager.GetInt64(ctx, "user_id")
	if userID == 0 {
		r.Logger.Warn("Whoami query failed due to unauthorized user", "action", "whoami")
		return nil, newErrorUnauthorized()
	}

	user, err := r.UserSrv.GetUserByID(userID)
	if err != nil {
		r.Logger.Warn("Whoami query failed due to internal server error", "userID", userID, "error", err.Error(), "action", "whoami")
		return nil, smartError(ctx, err)
	}

	return mapDomainUserObjToGQLUserObj(user), nil
}
