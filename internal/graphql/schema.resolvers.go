package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, username string, password string) (*User, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, username string, password string) (*User, error) {
	// just to test whether sql works
	// return row count in table flyway_schema_history as user id

	rows := r.DB.QueryRow("SELECT COUNT(*) FROM flyway_schema_history")
	var count int
	err := rows.Scan(&count)
	if err != nil {
		return nil, err
	}

	// temporary
	return &User{
		ID:       fmt.Sprintf("%d", count),
		Username: "test",
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
