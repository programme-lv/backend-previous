package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"strconv"

	"github.com/programme-lv/backend/internal/services/objects"
	"github.com/programme-lv/backend/internal/services/tasks"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, name string, code string) (*Task, error) {
	return nil, fmt.Errorf("not implemented: CreateTask - createTask")
}

// UpdateTaskVersionDescription is the resolver for the updateTaskVersionDescription field.
func (r *mutationResolver) UpdateTaskVersionDescription(ctx context.Context, taskVersionID string, description DescriptionInput) (*TaskVersion, error) {
	panic(fmt.Errorf("not implemented: UpdateTaskVersionDescription - updateTaskVersionDescription"))
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, taskID string) (*Task, error) {
	panic(fmt.Errorf("not implemented: DeleteTask - deleteTask"))
}

// ListPublishedTasks is the resolver for the listPublishedTasks field.
func (r *queryResolver) ListPublishedTasks(ctx context.Context) ([]*Task, error) {
	panic(fmt.Errorf("not implemented: ListPublishedTasks - listPublishedTasks"))
}

// GetStableTaskVersionByPublishedTaskCode is the resolver for the getStableTaskVersionByPublishedTaskCode field.
func (r *queryResolver) GetStableTaskVersionByPublishedTaskCode(ctx context.Context, taskCode string) (*TaskVersion, error) {
	panic(fmt.Errorf("not implemented: GetStableTaskVersionByPublishedTaskCode - getStableTaskVersionByPublishedTaskCode"))
}

// GetCurrentTaskVersionByTaskID is the resolver for the getCurrentTaskVersionByTaskID field.
func (r *queryResolver) GetCurrentTaskVersionByTaskID(ctx context.Context, taskID string) (*TaskVersion, error) {
	taskIDint64, err := strconv.ParseInt(taskID, 10, 64)
	if err != nil {
		return nil, err
	}

	taskVObj, err := tasks.GetCurrentTaskVersionByTaskID(r.PostgresDB, taskIDint64)
	if err != nil {
		return nil, err
	}

	res, err := internalTaskVToGQLTaskV(taskVObj)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// ListEditableTasks is the resolver for the listEditableTasks field.
func (r *queryResolver) ListEditableTasks(ctx context.Context) ([]*Task, error) {
	userID, err := r.GetUserFromContext(ctx)
	if err != nil {
		return nil, err
	}

	taskIds, err := tasks.ListEditableTaskIDs(r.PostgresDB, userID.ID)
	if err != nil {
		return nil, err
	}

	var res []*Task
	for _, taskID := range taskIds {
		taskObj, err := tasks.GetTaskByID(r.PostgresDB, taskID)
		if err != nil {
			return nil, err
		}
	}

}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func internalTaskVToGQLTaskV(taskVersion *objects.TaskVersion) (*TaskVersion, error) {
	marshalledCreatedAt, err := taskVersion.CreatedAt.MarshalText()
	if err != nil {
		return nil, err
	}

	var examples []*Example
	for _, example := range taskVersion.Description.Examples {
		examples = append(examples, &Example{
			Input:  example.Input,
			Answer: example.Answer,
		})
	}

	res := TaskVersion{
		VersionID: fmt.Sprint(taskVersion.ID),
		Code:      taskVersion.Code,
		Name:      taskVersion.Name,
		Description: &Description{
			Story:    taskVersion.Description.Story,
			Input:    taskVersion.Description.Input,
			Output:   taskVersion.Description.Output,
			Examples: examples,
			Notes:    taskVersion.Description.Notes,
		},
		Constraints: &Constraints{
			TimeLimitMs:   int(taskVersion.TimeLimitMs),
			MemoryLimitKb: int(taskVersion.MemoryLimitKb),
		},
		Metadata:  &Metadata{},
		CreatedAt: string(marshalledCreatedAt),
	}

	return &res, nil
}
