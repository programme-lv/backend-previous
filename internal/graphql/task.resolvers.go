package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"log"
	"strconv"

	"github.com/programme-lv/backend/internal/services/tasks"
	"github.com/ztrue/tracerr"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, name string, code string) (*Task, error) {
	return nil, fmt.Errorf("not implemented: CreateTask - createTask")
}

// UpdateTaskVersionDescription is the resolver for the updateTaskVersionDescription field.
func (r *mutationResolver) UpdateTaskVersionDescription(ctx context.Context, taskVersionID string, description DescriptionInput) (*TaskVersion, error) {
	panic(fmt.Errorf("not implemented: UpdateTaskVersionDescription - updateTaskVersionDescription"))
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, taskID string) (*Task, error) {
	panic(fmt.Errorf("not implemented: DeleteTask - deleteTask"))
}

// ListPublishedTasks is the resolver for the listPublishedTasks field.
func (r *queryResolver) ListPublishedTasks(ctx context.Context) ([]*Task, error) {
	panic(fmt.Errorf("not implemented: ListPublishedTasks - listPublishedTasks"))
}

// GetStableTaskVersionByPublishedTaskCode is the resolver for the getStableTaskVersionByPublishedTaskCode field.
func (r *queryResolver) GetStableTaskVersionByPublishedTaskCode(ctx context.Context, taskCode string) (*TaskVersion, error) {
	panic(fmt.Errorf("not implemented: GetStableTaskVersionByPublishedTaskCode - getStableTaskVersionByPublishedTaskCode"))
}

// GetCurrentTaskVersionByTaskID is the resolver for the getCurrentTaskVersionByTaskID field.
func (r *queryResolver) GetCurrentTaskVersionByTaskID(ctx context.Context, taskID string) (*TaskVersion, error) {
	taskIDint64, err := strconv.ParseInt(taskID, 10, 64)
	if err != nil {
		return nil, err
	}

	taskVObj, err := tasks.GetCurrentTaskVersionByTaskID(r.PostgresDB, taskIDint64)
	if err != nil {
		return nil, err
	}

	res, err := internalTaskVToGQLTaskV(taskVObj)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// ListEditableTasks is the resolver for the listEditableTasks field.
func (r *queryResolver) ListEditableTasks(ctx context.Context) ([]*Task, error) {
	user, err := r.GetUserFromContext(ctx)
	if err != nil {
		return nil, err
	}

	taskIds, err := tasks.ListEditableTaskIDs(r.PostgresDB, user.ID)
	if err != nil {
		return nil, err
	}

	var res []*Task = make([]*Task, 0)
	for _, taskID := range taskIds {
		taskObj, err := tasks.GetTaskByTaskID(r.PostgresDB, taskID)
		if err != nil {
			tracerr.PrintSourceColor(err)
			return nil, err
		}

		if taskObj.Current == nil {
			continue
		}

		task, err := internalTaskToGQLTask(taskObj)
		if err != nil {
			return nil, err
		}

		log.Println(task)
		res = append(res, task)
	}

	return res, nil
}
