package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	. "github.com/go-jet/jet/v2/postgres"
	"github.com/programme-lv/backend/internal/database/proglv/public/model"
	. "github.com/programme-lv/backend/internal/database/proglv/public/table"
)

// ListLanguages is the resolver for the listLanguages field.
func (r *queryResolver) ListLanguages(ctx context.Context) ([]*Language, error) {
	stmt := SELECT(
		ProgrammingLanguages.ID,
		ProgrammingLanguages.FullName,
		ProgrammingLanguages.MonacoID,
	).FROM(ProgrammingLanguages)

	var langs []model.ProgrammingLanguages
	err := stmt.Query(r.PostgresDB, &langs)
	if err != nil {
		return nil, err
	}

	// convert to graphql type
	var gqlLangs []*Language
	for _, lang := range langs {
		if lang.MonacoID != nil {
			gqlLangs = append(gqlLangs, &Language{
				ID:       lang.ID,
				FullName: lang.FullName,
				MonacoID: *lang.MonacoID,
			})
		}
	}

	return gqlLangs, nil
}
