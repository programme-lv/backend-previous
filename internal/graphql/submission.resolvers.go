package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"
	"time"

	"github.com/programme-lv/backend/internal/database"
	amqp "github.com/rabbitmq/amqp091-go"
)

// EnqueueSubmission is the resolver for the enqueueSubmission field.
func (r *mutationResolver) EnqueueSubmission(ctx context.Context, taskID string, languageID string, code string, versionID *string) (*Submission, error) {
	ch, err := r.SubmissionRMQ.Channel()
	if err != nil {
		return nil, err
	}
	defer ch.Close()

	q, err := ch.QueueDeclare("submissions", false, false, false, false, nil)
	if err != nil {
		return nil, err
	}

	user, err := r.GetUserFromContext(ctx)
	if err != nil {
		return nil, err
	}

	taskIDInt64, err := strconv.ParseInt(taskID, 10, 64)
	if err != nil {
		return nil, err
	}

	task, err := database.SelectTaskById(r.PostgresDB, taskIDInt64)
	if err != nil {
		return nil, err
	}

	// TODO: disallow users without access to non-published versions

	versionIDInt64 := task.PublishedVersionID
	if versionID != nil {
		parsed, err := strconv.ParseInt(*versionID, 10, 64)
		if err != nil {
			return nil, err
		}
		versionIDInt64 = &parsed
	}
	if versionIDInt64 == nil {
		return nil, fmt.Errorf("couldnt determine version ID")
	}

	tx, err := r.PostgresDB.Beginx()
	if err != nil {
		return nil, err
	}

	submissionId, err := database.CreateTaskSubmission(tx,
		user.ID, taskIDInt64, languageID, code)
	if err != nil {
		tx.Rollback()
		return nil, err
	}

	evaluationId, err := database.CreateSubmissionEvaluation(tx,
		submissionId, *versionIDInt64, nil, nil, 0, 0, "IQS", 0, 0, nil, nil, nil, nil)
	if err != nil {
		tx.Rollback()
		return nil, err
	}

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	body := struct {
		EvaluationId int64 `json:"evaluation_id"`
	}{
		EvaluationId: evaluationId,
	}

	jsonData, err := json.Marshal(body)
	if err != nil {
		tx.Rollback()
		return nil, err
	}

	err = ch.PublishWithContext(ctx, "", q.Name, false, false, amqp.Publishing{
		ContentType: "application/json",
		Body:        jsonData,
	})
	if err != nil {
		tx.Rollback()
		return nil, err
	}

	err = tx.Commit()
	if err != nil {
		return nil, err
	}

	return &Submission{
		ID: strconv.FormatInt(submissionId, 10),
		Task: &Task{
			ID: taskID,
			// TODO: add other fields
		},
		Language: &Language{
			// TODO: add other fields
		},
		Code: code,
	}, nil
}

// ListSubmissions is the resolver for the listSubmissions field.
func (r *queryResolver) ListSubmissions(ctx context.Context) ([]*Submission, error) {
	panic(fmt.Errorf("not implemented: ListSubmissions - listSubmissions"))
}
