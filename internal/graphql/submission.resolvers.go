package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"encoding/json"
	"fmt"
	"math/rand"
	"strconv"
	"time"

	"github.com/go-jet/jet/v2/postgres"
	"github.com/programme-lv/backend/internal/database/proglv/public/model"
	"github.com/programme-lv/backend/internal/database/proglv/public/table"
	"github.com/programme-lv/tester/pkg/messaging"
	amqp "github.com/rabbitmq/amqp091-go"
)

// EnqueueSubmissionForPublishedTaskVersion is the resolver for the enqueueSubmissionForPublishedTaskVersion field.
func (r *mutationResolver) EnqueueSubmissionForPublishedTaskVersion(ctx context.Context, taskID string, languageID string, submissionCode string) (*Submission, error) {
	taskIDInt64, err := strconv.ParseInt(taskID, 10, 64)
	if err != nil {
		return nil, err
	}

	ch, err := r.SubmissionRMQ.Channel()
	if err != nil {
		return nil, err
	}
	defer ch.Close()

	q, err := ch.QueueDeclare("eval_q", true, false, false, false, nil)
	if err != nil {
		return nil, err
	}

	user, err := r.GetUserFromContext(ctx)
	if err != nil {
		return nil, err
	}

	var task model.Tasks
	err = postgres.SELECT(table.Tasks.AllColumns).FROM(table.Tasks).
		WHERE(table.Tasks.ID.EQ(postgres.Int64(taskIDInt64))).Query(r.PostgresDB, &task)
	if err != nil {
		return nil, err
	}

	if task.PublishedVersionID == nil {
		return nil, fmt.Errorf("task has no published version")
	}

	var language model.ProgrammingLanguages
	err = postgres.SELECT(table.ProgrammingLanguages.AllColumns).FROM(table.ProgrammingLanguages).
		WHERE(table.ProgrammingLanguages.ID.EQ(postgres.String(languageID))).Query(r.PostgresDB, &language)
	if err != nil {
		return nil, err
	}

	var versionId int64 = int64(*task.PublishedVersionID)

	submission := model.TaskSubmissions{
		UserID:            user.ID,
		TaskID:            task.ID,
		ProgrammingLangID: language.ID,
		Submission:        submissionCode,
	}

	// create task submission
	var submissionId struct {
		model.TaskSubmissions
	}
	insertStmt := table.TaskSubmissions.INSERT(
		table.TaskSubmissions.UserID,
		table.TaskSubmissions.TaskID,
		table.TaskSubmissions.ProgrammingLangID,
		table.TaskSubmissions.Submission,
	).MODEL(submission).RETURNING(table.TaskSubmissions.ID)
	err = insertStmt.Query(r.PostgresDB, &submissionId)
	if err != nil {
		return nil, err
	}

	// create submission evaluation
	evaluation := model.SubmissionEvaluations{
		TaskSubmissionID:  submissionId.ID,
		EvalTaskVersionID: versionId,
		EvalStatusID:      "IQ",
	}

	var evaluationId struct {
		ID int64 `db:"id"`
	}
	insertStmt = table.SubmissionEvaluations.INSERT(
		table.SubmissionEvaluations.TaskSubmissionID,
		table.SubmissionEvaluations.EvalTaskVersionID,
		table.SubmissionEvaluations.EvalStatusID,
	).MODEL(evaluation).RETURNING(table.SubmissionEvaluations.ID)
	err = insertStmt.Query(r.PostgresDB, &evaluationId)
	if err != nil {
		return nil, err
	}

	// publish submission
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	body := messaging.EvaluationRequest{
		TaskVersionId: versionId,
		Submission: messaging.Submission{
			SourceCode: submissionCode,
			LanguageId: languageID,
		},
	}

	correlation := messaging.Correlation{
		HasEvaluationId: true,
		EvaluationId:    evaluationId.ID,
		UnixMillis:      time.Now().UnixMilli(),
		RandomInt63:     rand.Int63(),
	}

	bodyJson, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}

	correlationJson, err := json.Marshal(correlation)
	if err != nil {
		return nil, err
	}

	err = ch.PublishWithContext(ctx, "", q.Name, false, false, amqp.Publishing{
		ContentType:   "application/json",
		Body:          bodyJson,
		ReplyTo:       "res_q",
		CorrelationId: string(correlationJson),
	})
	if err != nil {
		return nil, err
	}

	return &Submission{
		ID:   strconv.FormatInt(submissionId.ID, 10),
		Task: nil,
		Language: &ProgrammingLanguage{
			ID:       language.ID,
			FullName: language.FullName,
			MonacoID: language.MonacoID,
		},
		Code: submissionCode,
	}, nil
}

// ListPublicSubmissions is the resolver for the listPublicSubmissions field.
func (r *queryResolver) ListPublicSubmissions(ctx context.Context) ([]*Submission, error) {
	panic(fmt.Errorf("not implemented: ListPublicSubmissions - listPublicSubmissions"))
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) ListSubmissions(ctx context.Context) ([]*Submission, error) {
	panic(fmt.Errorf("not implemented: ListSubmissions - listSubmissions"))
}
func (r *mutationResolver) EnqueueSubmission(ctx context.Context, taskID string, languageID string, code string, versionID *string) (*Submission, error) {
	panic(fmt.Errorf("not implemented: EnqueueSubmission - enqueueSubmission"))
}
