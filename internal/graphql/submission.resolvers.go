package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/programme-lv/backend/internal/database"
	amqp "github.com/rabbitmq/amqp091-go"
)

// EnqueueSubmission is the resolver for the enqueueSubmission field.
func (r *mutationResolver) EnqueueSubmission(ctx context.Context, taskID string, languageID string, code string) (*Submission, error) {
	user, err := r.GetUserFromContext(ctx)
	if err != nil {
		return nil, err
	}

	taskIDInt64, err := strconv.ParseInt(taskID, 10, 64)
	if err != nil {
		return nil, err
	}

	tx, err := r.PostgresDB.Beginx()
	if err != nil {
		return nil, err
	}

	err = database.CreateTaskSubmission(tx, user.ID, taskIDInt64, languageID, code)
	if err != nil {
		tx.Rollback()
		return nil, err
	}

	// TODO: create task evaluation

	ch, err := r.SubmissionRMQ.Channel()
	if err != nil {
		return nil, err
	}
	defer ch.Close()

	q, err := ch.QueueDeclare("submissions", false, false, false, false, nil)

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	body := "Hello World!"
	err = ch.PublishWithContext(ctx, "", q.Name, false, false, amqp.Publishing{
		ContentType: "application/json",
		Body:        []byte(body),
	})
	if err != nil {
		return nil, err
	}

	err = tx.Commit()
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ListSubmissions is the resolver for the listSubmissions field.
func (r *queryResolver) ListSubmissions(ctx context.Context) ([]*Submission, error) {
	panic(fmt.Errorf("not implemented: ListSubmissions - listSubmissions"))
}
