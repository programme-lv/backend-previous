package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"encoding/json"
	"fmt"
	"math/rand"
	"strconv"
	"time"

	"github.com/go-jet/jet/v2/postgres"
	"github.com/programme-lv/backend/internal/database/proglv/public/model"
	"github.com/programme-lv/backend/internal/database/proglv/public/table"
	"github.com/programme-lv/tester/pkg/messaging"
	amqp "github.com/rabbitmq/amqp091-go"
)

// EnqueueSubmissionForPublishedTaskVersion is the resolver for the enqueueSubmissionForPublishedTaskVersion field.
func (r *mutationResolver) EnqueueSubmissionForPublishedTaskVersion(ctx context.Context, taskID string, languageID string, submissionCode string) (*Submission, error) {
	// validate task id
	taskIDInt64, err := strconv.ParseInt(taskID, 10, 64)
	if err != nil {
		return nil, err
	}

	// authenticate user
	user, err := r.GetUserFromContext(ctx)
	if err != nil {
		return nil, err
	}

	// fetch task published version id
	var task model.Tasks
	err = postgres.SELECT(table.Tasks.AllColumns).FROM(table.Tasks).
		WHERE(table.Tasks.ID.EQ(postgres.Int64(taskIDInt64))).Query(r.PostgresDB, &task)
	if err != nil {
		return nil, err
	}
	if task.PublishedVersionID == nil {
		return nil, fmt.Errorf("task has no published version")
	}

	// fetch programming language
	var language model.ProgrammingLanguages
	err = postgres.SELECT(table.ProgrammingLanguages.AllColumns).FROM(table.ProgrammingLanguages).
		WHERE(table.ProgrammingLanguages.ID.EQ(postgres.String(languageID))).Query(r.PostgresDB, &language)
	if err != nil {
		return nil, err
	}

	// TODO: do all inserts in one transaction

	// create a new evaluation
	evaluation := model.Evaluations{
		EvalStatusID:  "IQ",
		TaskVersionID: int64(*task.PublishedVersionID),
	}

	insertStmt := table.Evaluations.INSERT(
		table.Evaluations.EvalStatusID,
		table.Evaluations.TaskVersionID,
	).MODEL(evaluation).RETURNING(table.Evaluations.ID)
	err = insertStmt.Query(r.PostgresDB, &evaluation)
	if err != nil {
		return nil, err
	}

	// create a new submission
	submission := model.TaskSubmissions{
		UserID:            user.ID,
		TaskID:            task.ID,
		ProgrammingLangID: language.ID,
		Submission:        submissionCode,
		Hidden:            false,
		VisibleEvalID:     &evaluation.ID,
	}

	insertStmt = table.TaskSubmissions.INSERT(
		table.TaskSubmissions.UserID,
		table.TaskSubmissions.TaskID,
		table.TaskSubmissions.ProgrammingLangID,
		table.TaskSubmissions.Submission,
		table.TaskSubmissions.Hidden,
		table.TaskSubmissions.VisibleEvalID,
	).MODEL(submission).RETURNING(table.TaskSubmissions.ID)
	err = insertStmt.Query(r.PostgresDB, &submission)
	if err != nil {
		return nil, err
	}

	// link the evaluation to the submission
	submissionEvaluation := model.SubmissionEvaluations{
		SubmissionID: submission.ID,
		EvaluationID: evaluation.ID,
	}

	insertStmt = table.SubmissionEvaluations.INSERT(
		table.SubmissionEvaluations.SubmissionID,
		table.SubmissionEvaluations.EvaluationID,
	).MODEL(submissionEvaluation).RETURNING(table.SubmissionEvaluations.ID)
	err = insertStmt.Query(r.PostgresDB, &submissionEvaluation)
	if err != nil {
		return nil, err
	}

	// publish submission
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	body := messaging.EvaluationRequest{
		TaskVersionId: int64(*task.PublishedVersionID),
		Submission: messaging.Submission{
			SourceCode: submissionCode,
			LanguageId: languageID,
		},
	}

	correlation := messaging.Correlation{
		HasEvaluationId: true,
		EvaluationId:    evaluation.ID,
		UnixMillis:      time.Now().UnixMilli(),
		RandomInt63:     rand.Int63(),
	}

	bodyJson, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}

	correlationJson, err := json.Marshal(correlation)
	if err != nil {
		return nil, err
	}

	ch, err := r.SubmissionRMQ.Channel()
	if err != nil {
		return nil, err
	}
	defer ch.Close()

	q, err := ch.QueueDeclare("eval_q", true, false, false, false, nil)
	if err != nil {
		return nil, err
	}

	err = ch.PublishWithContext(ctx, "", q.Name, false, false, amqp.Publishing{
		ContentType:   "application/json",
		Body:          bodyJson,
		ReplyTo:       "res_q",
		CorrelationId: string(correlationJson),
	})
	if err != nil {
		return nil, err
	}

	return &Submission{
		ID:   strconv.FormatInt(submission.ID, 10),
		Task: nil,
		Language: &ProgrammingLanguage{
			ID:       language.ID,
			FullName: language.FullName,
			MonacoID: language.MonacoID,
		},
		Submission: submissionCode,
	}, nil
}

// ListPublicSubmissions is the resolver for the listPublicSubmissions field.
func (r *queryResolver) ListPublicSubmissions(ctx context.Context) ([]*Submission, error) {
	selectStmt := postgres.SELECT(
		table.TaskSubmissions.AllColumns,
		table.Tasks.AllColumns,
		table.TaskVersions.AllColumns,
		table.ProgrammingLanguages.AllColumns,
		table.Users.AllColumns,
		table.Evaluations.AllColumns,
		table.RuntimeStatistics.AllColumns,
	).FROM(table.TaskSubmissions.
		LEFT_JOIN(table.Tasks, table.TaskSubmissions.TaskID.EQ(table.Tasks.ID)).
		INNER_JOIN(table.TaskVersions, table.Tasks.PublishedVersionID.EQ(table.TaskVersions.ID)).
		LEFT_JOIN(table.ProgrammingLanguages, table.TaskSubmissions.ProgrammingLangID.EQ(table.ProgrammingLanguages.ID)).
		LEFT_JOIN(table.Users, table.TaskSubmissions.UserID.EQ(table.Users.ID)).
		INNER_JOIN(table.Evaluations, table.TaskSubmissions.VisibleEvalID.EQ(table.Evaluations.ID)).
		LEFT_JOIN(table.RuntimeStatistics, table.Evaluations.TestRuntimeStatisticsID.EQ(table.RuntimeStatistics.ID))).
		WHERE(
			table.TaskSubmissions.Hidden.EQ(postgres.Bool(false)),
		).ORDER_BY(table.TaskSubmissions.CreatedAt.DESC())

	var submissions []struct {
		model.TaskSubmissions
		model.Tasks
		model.TaskVersions
		model.ProgrammingLanguages
		model.Users
		model.Evaluations
		model.RuntimeStatistics // TODO: this can be a pointer
	}
	err := selectStmt.Query(r.PostgresDB, &submissions)
	if err != nil {
		return nil, err
	}

	var gqlSubmissions []*Submission
	for _, submission := range submissions {
		avgTimeMsInt := int(submission.AvgTimeMillis)
		maxTimeMsInt := int(submission.RuntimeStatistics.MaximumTimeMillis)
		avgMemoryKbInt := int(submission.RuntimeStatistics.AvgMemoryKibibytes)
		maxMemoryKbInt := int(submission.RuntimeStatistics.MaximumMemoryKibibytes)

		var possibleScorePtr *int = nil
		if submission.Evaluations.EvalPossibleScore != nil {
			tmp := int(*submission.Evaluations.EvalPossibleScore)
			possibleScorePtr = &tmp
		}
		gqlSubmissions = append(gqlSubmissions, &Submission{
			ID: strconv.FormatInt(submission.TaskSubmissions.ID, 10),
			Task: &Task{
				ID:   strconv.FormatInt(submission.Tasks.ID, 10),
				Code: submission.TaskVersions.ShortCode,
				Name: submission.TaskVersions.FullName,
			},
			Language: &ProgrammingLanguage{
				ID:       submission.ProgrammingLanguages.ID,
				FullName: submission.ProgrammingLanguages.FullName,
			},
			Submission: submission.Submission,
			Evaluation: &Evaluation{
				ID:            strconv.FormatInt(submission.Evaluations.ID, 10),
				Status:        submission.Evaluations.EvalStatusID,
				TotalScore:    int(submission.Evaluations.EvalTotalScore),
				PossibleScore: possibleScorePtr,
				AvgTimeMs:     &avgTimeMsInt,
				MaxTimeMs:     &maxTimeMsInt,
				AvgMemoryKb:   &avgMemoryKbInt,
				MaxMemoryKb:   &maxMemoryKbInt,
				TestVerdictStatistics: []*TestVerdictStatistic{
					{
						Verdict: "OK",
						Count:   4,
					},
					{
						Verdict: "WA",
						Count:   1,
					},
					{
						Verdict: "TLE",
						Count:   3,
					},
				},
			},
			Username:  submission.Username,
			CreatedAt: submission.TaskSubmissions.CreatedAt.Format(time.RFC3339),
		})
	}

	return gqlSubmissions, nil
}
